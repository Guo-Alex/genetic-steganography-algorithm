#CS3235 PROJECT. 
# A GENETIC ALGORITHM FOR AUDIO STEGONAGRAPHY
import wave
import binascii
import audioop
import numpy as np
import random as random
import struct
def main():
	af = open_audio_file("sample.wav")
	get_audio_information(af)
	audio = load_into_memory(af)
	compute_fitness(audio)
	edited_audio = add_random_noise("hello",audio,100)
	write_wave_file("sample_edited.wav",edited_audio)
def add_random_noise(msg_byte,audio_hex,position):
	print "audio before change: "  + audio_hex[position]
	print "hex byte: " + msg_byte
	audio_list = list(audio_hex)
	msg_list = list(msg_byte)
	audio_list[position] = msg_byte
	length = len(audio_list)/8
	print length
	print len(audio_hex)/8
	for x in range (0,999900): 
		randinteger = random.randint(1, 15)
		string = str(randinteger)
		randhex = binascii.hexlify(string)
		audio_list[x] = randhex
	print "audio after change: " + audio_list[position]
	edited_audio =  ''.join(audio_list)
	return edited_audio
def write_wave_file(fname,hexdata):
	noise_output = wave.open(fname,'w')
	noise_output.setparams((2,2,44100,0,'NONE','not compressed'))
	audio_bytes = bytearray.fromhex(hexdata)
	noise_output.writeframes(audio_bytes)
	noise_output.close()		
def load_segment(af,epoch,frame_ration): 
	num_frames = af.getnframes()
def open_audio_file(fname):
        audio_file = wave.open(fname,'rb')
        print("audio file opened....OK.\n")
	return audio_file
def get_audio_information(af):
	parameters = af.getparams()
	print "number of channels : " , parameters[0]
	print "sampwidth : " , parameters[1]
	print "framerate " , parameters[2]
	print "number of frames " , parameters[3]
	print "compression type" , parameters[4]
	print "compression name " , parameters[5]
	print("reading information....OK.\n")
def load_into_memory(af):
	num_frames = af.getnframes()
	print num_frames
	frames = af.readframes(num_frames)
	#print frames	
	rms = audioop.rms(frames,2)	
	print("rms in_load_memory : " , rms)
	hex_array = binascii.hexlify(frames)
	return hex_array
def input_secret_message():
	print "enter message"	
def compute_fitness(audio):
	print "computing pcnr"
	
	print("rms : " , rms)
	return rms
main()

